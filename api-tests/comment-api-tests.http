### Comment API Tests
### This file contains comprehensive tests for the Comment API endpoints

### Variables for testing
@baseUrl = http://localhost:8080
@contentType = application/json

### Test Data Setup
# These IDs should be replaced with actual IDs from your test data
@testUserId = 550e8400-e29b-41d4-a716-446655440000
@testPostId = 550e8400-e29b-41d4-a716-446655440001
@testCommentId = 550e8400-e29b-41d4-a716-446655440002
@testReplyId = 550e8400-e29b-41d4-a716-446655440003

### 1. Create a new comment on a post
POST {{baseUrl}}/api/comments
Content-Type: {{contentType}}

{
  "content": "This is a test comment on the post. It contains meaningful content to test the comment functionality.",
  "authorId": "{{testUserId}}",
  "postId": "{{testPostId}}"
}

### 2. Create another comment on the same post
POST {{baseUrl}}/api/comments
Content-Type: {{contentType}}

{
  "content": "This is a second comment on the same post. We need multiple comments to test the listing functionality.",
  "authorId": "{{testUserId}}",
  "postId": "{{testPostId}}"
}

### 3. Create a reply to the first comment
POST {{baseUrl}}/api/comments/replies
Content-Type: {{contentType}}

{
  "content": "This is a reply to the first comment. Testing the reply functionality with 1-level depth.",
  "authorId": "{{testUserId}}",
  "postId": "{{testPostId}}",
  "parentCommentId": "{{testCommentId}}"
}

### 4. Get a specific comment by ID
GET {{baseUrl}}/api/comments/{{testCommentId}}

### 5. Get all comments for a post (with replies)
GET {{baseUrl}}/api/comments/posts/{{testPostId}}

### 6. Get comment count for a post
GET {{baseUrl}}/api/comments/posts/{{testPostId}}/count

### 7. Update a comment
PUT {{baseUrl}}/api/comments/{{testCommentId}}
Content-Type: {{contentType}}

{
  "content": "This is the updated content of the comment. Testing the update functionality.",
  "authorId": "{{testUserId}}"
}

### 8. Check if a comment exists
GET {{baseUrl}}/api/comments/{{testCommentId}}/exists

### 9. Delete a reply comment
DELETE {{baseUrl}}/api/comments/{{testReplyId}}?authorId={{testUserId}}

### 10. Delete a root comment (should also delete its replies)
DELETE {{baseUrl}}/api/comments/{{testCommentId}}?authorId={{testUserId}}

### Error Test Cases

### 11. Try to create comment with blank content (should fail)
POST {{baseUrl}}/api/comments
Content-Type: {{contentType}}

{
  "content": "",
  "authorId": "{{testUserId}}",
  "postId": "{{testPostId}}"
}

### 12. Try to create comment with content too long (should fail)
POST {{baseUrl}}/api/comments
Content-Type: {{contentType}}

{
  "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. This content is intentionally very long to exceed the maximum allowed length of 1000 characters for comment content validation testing purposes.",
  "authorId": "{{testUserId}}",
  "postId": "{{testPostId}}"
}

### 13. Try to create comment with invalid author ID (should fail)
POST {{baseUrl}}/api/comments
Content-Type: {{contentType}}

{
  "content": "This comment has an invalid author ID",
  "authorId": "invalid-uuid-format",
  "postId": "{{testPostId}}"
}

### 14. Try to create comment with invalid post ID (should fail)
POST {{baseUrl}}/api/comments
Content-Type: {{contentType}}

{
  "content": "This comment has an invalid post ID",
  "authorId": "{{testUserId}}",
  "postId": "invalid-uuid-format"
}

### 15. Try to create reply with invalid parent comment ID (should fail)
POST {{baseUrl}}/api/comments/replies
Content-Type: {{contentType}}

{
  "content": "This reply has an invalid parent comment ID",
  "authorId": "{{testUserId}}",
  "postId": "{{testPostId}}",
  "parentCommentId": "invalid-uuid-format"
}

### 16. Try to create reply to non-existent parent comment (should fail)
POST {{baseUrl}}/api/comments/replies
Content-Type: {{contentType}}

{
  "content": "This reply references a non-existent parent comment",
  "authorId": "{{testUserId}}",
  "postId": "{{testPostId}}",
  "parentCommentId": "550e8400-e29b-41d4-a716-999999999999"
}

### 17. Try to update comment with blank content (should fail)
PUT {{baseUrl}}/api/comments/{{testCommentId}}
Content-Type: {{contentType}}

{
  "content": "",
  "authorId": "{{testUserId}}"
}

### 18. Try to update non-existent comment (should fail)
PUT {{baseUrl}}/api/comments/550e8400-e29b-41d4-a716-999999999999
Content-Type: {{contentType}}

{
  "content": "Trying to update a non-existent comment",
  "authorId": "{{testUserId}}"
}

### 19. Try to update comment by different user (should fail)
PUT {{baseUrl}}/api/comments/{{testCommentId}}
Content-Type: {{contentType}}

{
  "content": "Trying to update comment by different user",
  "authorId": "550e8400-e29b-41d4-a716-999999999998"
}

### 20. Try to delete comment by different user (should fail)
DELETE {{baseUrl}}/api/comments/{{testCommentId}}?authorId=550e8400-e29b-41d4-a716-999999999998

### 21. Try to get non-existent comment (should fail)
GET {{baseUrl}}/api/comments/550e8400-e29b-41d4-a716-999999999999

### 22. Try to get comments for non-existent post (should fail)
GET {{baseUrl}}/api/comments/posts/550e8400-e29b-41d4-a716-999999999999

### Advanced Test Cases

### 23. Test creating multiple replies to the same comment
POST {{baseUrl}}/api/comments/replies
Content-Type: {{contentType}}

{
  "content": "This is the first reply to the root comment",
  "authorId": "{{testUserId}}",
  "postId": "{{testPostId}}",
  "parentCommentId": "{{testCommentId}}"
}

###
POST {{baseUrl}}/api/comments/replies
Content-Type: {{contentType}}

{
  "content": "This is the second reply to the same root comment",
  "authorId": "{{testUserId}}",
  "postId": "{{testPostId}}",
  "parentCommentId": "{{testCommentId}}"
}

### 24. Test comment content at maximum length (1000 characters)
POST {{baseUrl}}/api/comments
Content-Type: {{contentType}}

{
  "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur.",
  "authorId": "{{testUserId}}",
  "postId": "{{testPostId}}"
}

### 25. Test comment with special characters and Unicode
POST {{baseUrl}}/api/comments
Content-Type: {{contentType}}

{
  "content": "ÎåìÍ∏Ä ÌÖåÏä§Ìä∏ÏûÖÎãàÎã§! üéâ Special characters: @#$%^&*()_+-=[]{}|;':\",./<>? Unicode: ÌïúÍ∏Ä, ‰∏≠Êñá, Êó•Êú¨Ë™û, ÿßŸÑÿπÿ±ÿ®Ÿäÿ©, —Ä—É—Å—Å–∫–∏–π",
  "authorId": "{{testUserId}}",
  "postId": "{{testPostId}}"
}

### 26. Verify final state - get all comments for the post
GET {{baseUrl}}/api/comments/posts/{{testPostId}}

### 27. Verify final comment count
GET {{baseUrl}}/api/comments/posts/{{testPostId}}/count

### Instructions for running these tests:
### 1. Start your Spring Boot application
### 2. Make sure you have test data (users, posts) in your database
### 3. Update the @testUserId and @testPostId variables with actual IDs from your test data
### 4. Run the tests in order, updating @testCommentId and @testReplyId with actual IDs returned from the create operations
### 5. Some tests are expected to fail (error cases) - verify they return appropriate error responses
### 6. The final tests (26-27) should show the current state of comments for the test post

